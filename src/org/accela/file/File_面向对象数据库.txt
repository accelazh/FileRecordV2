1. 面向对象的数据库，如果支持继承、接口、多态，那么View的概念就可以用接口来实现
2. 面向数据库处理的应该是抽象数据集这样的东西，而对象则还包括了多该对象的行为和数据状态的约束。比如不可变类，除了存储其自己的数据意外，还包含了对getter和setter的约束。在做持久化的和反持久化的时候，新建对象，如果不用反射，就需要注意如何初始化，因为没有setter可用。
   因此，面向对象数据库中的"对象"，和面向对象语言中的"对象"其实并不完全一样。其间还需要一坐桥梁，即告诉数据库，一个对象所具有的属性应该如何被保存，以及根据这些属性，应该如何新建出一个对象。
3. 自动persistence的对象，与数据库的区别，数据库在persistence的基础上，还提供的强大的查询等功能(set aside concurrency and availibility and so on)。
4. 数据库是用来解决什么问题的？too much data for memory、restore after program ends、query...这其中是不是出现了耦合，我能够把它们拆开吗？也许我应该区分persistence和database这两个概念的不同

5. 一个对象是可以持久化的，这与数据库什么无关。一大堆对象放在一起，之所以有查询的能力，是因为它们被存放在某种特殊的集合里，这与持久化没有关系。这个集合也是对象，这个集合也么以被持久化，因此有了数据库。有的对象太大了，例如这个集合，它们可能无法放在内存里，但是使用者需要能够使用它，并且我需要对使用者隐藏对象是存在内存里还是硬盘上，或者两者；可能所有对象都会分成句柄和实体两个部分，将句柄加载到内存、通过句柄，你就可以使用这个对象，而这个对象的实体，可能还是保存在硬盘上。
6. 编程语言的发展，从某一方面看，是这样的。直接操纵内存、硬盘（以字节数组的形式）——>出现类型，以类型为单位操纵内存、硬盘（结构体时代）——>出现对象，类型的含义经过强化，加入了方法，以对象为单位操纵内存、硬盘（new Object()新建对象，也许以后可以对文件也这样）
7. 不是要抛弃关系型数据库，而是把它作为操纵文件的基本方式、底层;但也可能这样，应该有办法避免ORM。面向对象的数据库的概念可能有问题，会被瓦解掉，实现这个功能的可能是像Cache这类东西。