1. 要想像内存一样工作，RecordPool、Array还需要具有允许仅仅修改分配的记录的一部分，而不是全部更新的能力。这时才能够做出数组。
面向对象的时候，部分修改一条记录对应修改对象的属性，具体实现与设计是怎样的呢?

2010-6-7:
1. 每一层都需要将对象变成字节数组，然后再变成对象，开销很大，如何避免层层转化的开销？
2. 高层集合类的新建和持久化极端复杂
3. 链表但出现断裂时，如果作为队列使用，就会出现reader不工作
4. 双文件、顺序读写、使用定长块的队列似乎具有理想的容错性。一但使用链接，就会出现容错性不佳的情况，虽然重启能够恢复
5. JCS中也许有可以学的东西

2010-6-9:
1. 一种设计文件数据结构的新思路，将数据保存到硬盘上，需要用的读取一个chunk到内存，然后从这个chunk中取所需。
Queue+Queue=Queue。每个chunk中就可以使用Java集合类了。

2010-6-15:
1. 处理文件中的空间分配时发生的碎片现象，一种办法是使用类似malloc的动态空间分配机制，一种是使用类似JCS的
IndexedDiskFile的顺序写+使用另一线程不定时地进行碎片整理的方法

2010-6-17:
1. 四个衡量指标：程序的简单性，磁盘访问频度（速度），内存空间使用，磁盘空间使用。总是
找不到一个各方面都让我满意的解决方案。